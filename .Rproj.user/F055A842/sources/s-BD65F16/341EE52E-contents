###                           ###
### - * - * - * - * - * - * - ###
### *     C H E C K U P     * ###
### * - * - * - * - * - * - * ###
###                           ###
###   N i c k   S a n d e r   ###
###                           ###
###                           ###
###            CC             ###
###         FUNCTIONS         ###


##########################
###    CC Functions    ###
##########################

    ##   Return OHLCV Time-Series **DATA**:      (not a ts object)
    ##===================================================================================================#
    ##   ---   GetCoinTimeSeries        (one coin)               Returns:   VECTOR / DATA FRAME
    ##   ---   GetBagTimeSeries         (vector of coins)        Returns:   LIST
    ##
    ##
    ##
    ##   Get Historical Price of Coin at Given Time/Date:
    ##===================================================================================================#
    ##   ---   GetPriceAtTimestamp      (any coin)
    ##        ---   GetBTCAtTimestamp   (BTC)
    ##        ---   GetETHAtTimestamp   (ETH)
    ##


###  ---  Get Coin Time-Series

GetCoinTimeSeries <- function(InputCoin="ETH",PairCoin="BTC",timeframe="hour",pd=1000) {
  ##  Timeframe Options:    hour    minute    day
  ##  Period:               How many (timeframe)s do you want to load? 1000 days? 9000 hours? really should be common periods/sample sizes when comparing coins.
  
  ##    start using some %>%'s in this bitch ... 
  #pd=1000
  message("  * Downloading ", InputCoin, " historical price data ...")
  
  ## API call
  #url <- paste0("https://min-api.cryptocompare.com/data/histo", timeframe, "?fsym=", InputCoin, "&tsym=", PairCoin, "&allData=true", collapse = "")
  url <- paste0("https://min-api.cryptocompare.com/data/histo", timeframe, "?fsym=", InputCoin, "&tsym=", PairCoin, "&limit=", pd, collapse = "")
  coin.histo <- fromJSON(url)
  
  if (coin.histo$Response != "Success") {
    message("\tError [critical]           '",InputCoin,"' does not match any coins on CoinMarketCap.")
    message("\t",coin.histo$Response, "  ",coin.histo$Message)
    coin.data <- NA
  } else {
    coin.data <- coin.histo$Data
    coin.data$time <- as_datetime(coin.data$time)
    message("  * Download complete.")
    #message("")
    message("  * Historical prices for ",InputCoin," have been loaded.")
    message("\tPair:\t", InputCoin,"-",PairCoin)
    if (timeframe == "day") {
      message("\tPrices:\tDAILY")
    } else if (timeframe == "hour") {
      message("\tPrices:\tHOURLY")
    } else if (timeframe == "minute") {
      message("\tPrices:\tMINUTELY")
    } else {
      message("\tTimeframe:   ", pd, " [ ERROR ]")
    }
    message("\t\t<--  Rows of data requested:\t",pd)
    message("\t\t-->  Rows of data received:\t",nrow(coin.data))
    message("")
  }
  coin.data
}
# zrx <- GetCoinTimeSeries(InputCoin="ZRX",PairCoin="BTC",timeframe="hour",pd=1000)
# View(zrx)  # Time-series (1000 hours of data) data of ZRX's OHLC prices & to/from volume




###  ---  Get Bag Time Series

GetBagTimeSeries <- function(Bag,PairCoin="BTC",timeframe,pd) {
  message("Creating Bag and attaching historical prices to coins ... (0%)")
  message("")
  # pd = Retrieve the same ___x_number___ of most-recent rows for each coin
  
  #defaultbag <- c("ETH","LTC","XLM","XRP")
  #if (Bag == defaultbag) {
  #  message("{{ --- Default Bag Detected --- }}")
  #}
  
  # Create a blank list
  datalist = list()
  # For each coin in Bag...
  for (i in 1:length(Bag)) {
    inputCoin = Bag[i]
    message(inputCoin,"\t"," (Coin ",i," of ",length(Bag),")")
    message("------------------------------------------------------------------")
    if (inputCoin == "BTC") {PairCoin <- "USD"}
    chist <- GetCoinTimeSeries(InputCoin=inputCoin,PairCoin,timeframe,pd)
    chist <- chist[order(chist$time, decreasing = TRUE),]
    datalist[[i]] <- chist[1:pd,]
    message("")
  }
  message("Historical OHLCV data has been attached to each coin in the Bag.")
  message("Success:  Bag creation complete (100%)")
  message("")
  names(datalist) <- Bag[1:length(Bag)]
  # Return list of bag data
  datalist 
}



###  ---  Get Price [of any coin] At Timestamp

GetPriceAtTimestamp <- function(InputCoin="BTC",PairCoin="USD",TimestampForPrice=1516503600) {
  # for a single PairCoin only
  url <- paste0("https://min-api.cryptocompare.com/data/pricehistorical", "?fsym=", InputCoin, "&tsyms=", PairCoin, "&ts=", TimestampForPrice, collapse = "")
  jdata <- fromJSON(url)
  jprice <- jdata[[1]][[1]]
  jprice
}
#price <- GetPriceAtTimestamp(InputCoin="ETH",PairCoin="USD",TimestampForPrice = 1516503600)
#price










###  ---  Get BTC [Price] At Timestamp

GetBTCAtTimestamp <- function(TimestampForPrice=1516503600) { # random timestamp is default
  if (TimestampForPrice==1516503600) {
    #message("WARNING: I detect that the historical Bitcoin prices being downloaded may not be what you requested. Did you specify the timestamp properly?")
    #message("Continuing anyway...")
  }
  InputCoin="BTC"
  PairCoin="USD"
  btcurl <- paste0("https://min-api.cryptocompare.com/data/pricehistorical", "?fsym=", InputCoin, "&tsyms=", PairCoin, "&ts=", TimestampForPrice, collapse = "")
  bdata <- fromJSON(btcurl)
  bprice <- bdata[[1]][[1]]
  bprice
}
#GetBTCAtTimestamp(1506753833)


###  ---  Get ETH [Price] At Timestamp

GetETHAtTimestamp <- function(TimestampForPrice=1516503600) { # random timestamp is default
  if (TimestampForPrice==1516503600) {
    #message("WARNING: I detect that the historical Ethereum prices being downloaded may not be what you requested. Did you specify the timestamp properly?")
    #message("Continuing anyway...")
  }
  InputCoin="ETH"
  PairCoin="USD"
  ethurl <- paste0("https://min-api.cryptocompare.com/data/pricehistorical", "?fsym=", InputCoin, "&tsyms=", PairCoin, "&ts=", TimestampForPrice, collapse = "")
  edata <- fromJSON(ethurl)
  eprice <- edata[[1]][[1]]
  eprice
}
#GetETHAtTimestamp(1516503000)





